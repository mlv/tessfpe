#!/bin/bash

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -ueo pipefail
HOST=powersupply
IFS=$'\n\t'
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
RESET="$(tput sgr0)"
CURL_COOKIE=${HOME}/.reset_switch_curl_cookie
ALL_SWITCHES=$(seq 1 6)

# Use curl to try to get the status of the reset board and process its HTML
function outlet_status {
  curl -s --cookie ${CURL_COOKIE} $HOST/index.htm | \
  tr "\n" "|" | \
  grep -o "<tr bgcolor=\"\#FFFFFF\">.*</td></tr>" | \
  sed -e 's/|//g' \
      -e 's/<\/tr>/<\/tr>\n/g' | \
  grep -v "<th>" | \
  grep -v "^$" | \
  sed -e 's/<tr bgcolor="#FFFFFF"><td align=center>//g' \
      -e 's/<\/td><td>/\t/g' \
      -e 's/<b><font color=red>//g' \
      -e 's/<b><font color=green>//g' \
      -e 's/<\/font><\/b>.*$//g'
}

function pretty_print_outlet_status {
  outlet_status | \
  sed -e "s/OFF/${RED}OFF${RESET}/g" \
      -e "s/ON/${GREEN}ON${RESET}/g" | \
  column -t -s $'\t'
}

function login {
  if [[ -z "$(outlet_status)" ]] ; then
     rm -f ${DIR}/.curl_cookie
     if [[ -z ${PASSWORD-} ]] ; then
        echo -n "Password: "
        read -s PASSWORD
        echo
     fi 
     curl -s -d "Username=tess" -d "Password=${PASSWORD}" --cookie-jar ${CURL_COOKIE} $HOST/login.tgi > /dev/null
     if [ -z "$(outlet_status)" ] ; then
        echo "${RED}LOGIN FAILED ✗${RESET}" > /dev/stderr
        exit 1
     fi
  fi
}

function turn_switch_on {
  curl -s --cookie ${CURL_COOKIE} $HOST/outlet?${1}=ON > /dev/null
}

function turn_switch_off {
  curl -s --cookie ${CURL_COOKIE} $HOST/outlet?${1}=OFF > /dev/null
}

function get_arguments {
  STATUS=$(outlet_status | cut -f1,2 | tr '\n' '¶' | tr '\t' '⇒')
  for arg in "$@"; do
     if [[ $arg == --* ]] ; then
        break
     fi
     QUERY=$(echo $STATUS | tr '¶' '\n' | grep $arg)
     if [[ $(echo $QUERY | tr '⇒' '\n' | grep ^$arg$) == $arg ]] ; then 
        echo $(echo $QUERY | tr '⇒' '\t' | cut -f1)
     else
        echo "Could not find switch: $arg" > /dev/stderr
        exit 1
     fi
  done
}

function turn_switches_on {
  ARGUMENTSX=$(get_arguments $@ ; echo ▶︎$?)
  EXIT_CODE=${ARGUMENTSX##*▶︎}
  if [[ $EXIT_CODE != "0" ]] ; then
     exit $EXIT_CODE
  fi
  ARGUMENTS=${ARGUMENTSX%▶︎*}
  if [[ -z ${ARGUMENTS} ]] ; then
     echo "No arguments specified" > /dev/stderr
     exit 1
  fi
  for i in ${ARGUMENTS}; do
     turn_switch_on $i
  done
  pretty_print_outlet_status
}

function turn_switches_off {
  ARGUMENTSX=$(get_arguments $@ ; echo ▶︎$?)
  EXIT_CODE=${ARGUMENTSX##*▶︎}
  if [[ $EXIT_CODE != "0" ]] ; then
     exit $EXIT_CODE
  fi
  ARGUMENTS=${ARGUMENTSX%▶︎*}
  if [[ -z ${ARGUMENTS} ]] ; then
     echo "No arguments specified" > /dev/stderr
     exit 1
  fi
  for i in ${ARGUMENTS}; do
     turn_switch_off $i
  done
  pretty_print_outlet_status
}

if [[ "$*" =~ "--help" ]]; then
       cat <<EOF
usage: $0 [--help] [--off] [--on] [--reset]

Control the hardware power switch attached to the Observatory Simulator.

If no argument is given, prints the status of the switch.

optional arguments:
  --help                      show this help message and exit
  --on                        turn on specified switches
  --on-all, --all-on          turn on all switches
  --off                       turn off specified switches
  --off-all, --all-off        turn off all switches
  --reset                     reset specified switches
  --reset-all, --reset-off    turn off all switches
EOF
       exit 0
fi

login

if [[ $# -eq 0 ]] ; then
   pretty_print_outlet_status
   exit 0
fi

for key in "$@" ; do
   case $key in
       --all-off|--off-all)
       shift
       turn_switches_off $ALL_SWITCHES
       ;;
       --off)
       shift
       turn_switches_off $@
       ;;
       --all-on|--on-all)
       shift
       turn_switches_on $ALL_SWITCHES
       ;;
       --on)
       shift
       turn_switches_on $@
       ;;
       --reset-all|--all-reset)
       shift
       turn_switches_off $ALL_SWITCHES
       echo "----------------"
       turn_switches_on $ALL_SWITCHES
       ;;
       --reset)
       shift
       turn_switches_off $@
       echo "----------------"
       turn_switches_on $@
       ;;
       *)
       # Skip argument
       shift
       ;;
   esac
done
exit 0
